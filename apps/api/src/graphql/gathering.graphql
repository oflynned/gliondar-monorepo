extend type Query {
    getGatherings(page: Int): [Gathering!]
    getGatheringById(id: ID!): Gathering
}

extend type Mutation {
    createGathering(title: String!, description: String!): Gathering
    deleteGathering(id: ID!): Gathering
}

#union GatheringResult = Gathering | GatheringNotFound | InvalidGathering | DeletedGathering

#type GatheringNotFound {
#    message: String!
#}
#
#type InvalidGathering {
#    message: String!
#}
#
#type DeletedGathering {
#    id: ID!
#    deletedAt: DateTime!
#}

type Gathering {
    id: ID!
    createdAt: DateTime!
    lastUpdatedAt: DateTime
    title: String!
    address: String!
    bookmarked: Boolean!
    coordinates: CoordinateSet
    description: [String!]
    startsAt: DateTime
    timezone: String
    createdBy: User
    attendees: [Attendee!]
    imageUrl: String
}

union Address = IrishAddress | AmbiguousAddress

type IrishAddress {
    eircode: String!
    address: [String!]!
}

type AmbiguousAddress {
    address: [String!]!
    country: String!
}
