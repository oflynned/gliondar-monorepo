extend type Query {
    getUser: User
    getUserById(id: ID!): User
    getLocalUsers: [User!]
}

extend type Mutation {
    createUser(email: String!, password: String!): User
    deleteUser: User
}

# TODO swap this out later when we want more useful states
#union UserResult = User | InvalidUser | UserNotFound | DeletedUser | BlockedUser
#
#type BlockedUser {
#    id: ID!
#    blockedAt: DateTime!
#    blockedBy: UserResult
#    user: UserResult
#}
#
#type UserNotFound {
#    message: String!
#}
#
#type InvalidUser {
#    message: String!
#}
#
#type DeletedUser {
#    id: ID!
#    deletedAt: DateTime!
#}

type User {
    id: ID!
    createdAt: DateTime!
    lastOnlineAt: DateTime!
    lastUpdatedAt: DateTime
    email: String!
    timezone: Timezone
    posts: [UserGeneratedContent!]
    interests: [Interest]
    attendance: [Attendee]
    profile: Profile!
    location: UserLocation
    avatar: Avatar
}

type UserLocation {
    # TODO determine the inclusion of city name, ga vs en localisation etc
    coordinates: CoordinateSet
}

type Profile {
    id: ID!
    name: String!
    fluency: Fluency!
    preferredLanguage: PreferredLanguage!
    user: User
}

enum Fluency {
    NATIVE,
    ADVANCED,
    INTERMEDIATE,
    BEGINNER
}
